* Project      : Great Sage
*                https://github.com/leostayner/
* Developed by : Leonardo Pereira Medeiros
 
 gramma Great Sage;

{
    tokens=[
         identifier='regexp:[a-zA-Z][a-zA-Z0-9_]*'

         integer-constant='regexp:\d+'
         character-constant='regexp:[a-zA-Z]'
         floating-constant='regexp:[+-]?([0-9]*[.])?[0-9]+f'
    ]
}

<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= "__function__" <type-specifier> <declarator> {<declaration>}* <compound-statement>
                        
<declaration> ::=  {<type-specifier>}+ {<init-declarator>}* ;

<type-specifier> ::= integer
                    | boolean
                                       
<init-declarator> ::= "__var__" <declarator>
                    | "__var__" <declarator> = assignment-expression

<declarator> ::= <identifier>

<assignment-expression> ::= <conditional-expression>
                            |<unary-expression> <assignment-operator> <assignment-expression>

<unary-expression> ::= <postfix-expression>

<primary-expression> ::= <identifier>
                       | <integer-constant>
                       | ( <expression> )

<expression> ::= <assignment-expression>
               
<constant-expression> ::= <inclusive-or-expression>

<inclusive-or-expression> ::= <and-expression>
                            | <inclusive-or-expression> OR <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> AND <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> = <relational-expression>

<relational-expression> ::= <relational-expression> LT <additive-expression>
                          | <relational-expression> GT <additive-expression>


<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> ADD <multiplicative-expression>
                        | <additive-expression> SUB <multiplicative-expression>

<multiplicative-expression> ::= <unary-expression>
                              | <multiplicative-expression> MUL <unary-expression>
                              | <multiplicative-expression> DIV <unary-expression>


<assignment-operator> ::= =

<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> ( {<assignment-expression>}* )
                       
                  
<compound-statement> ::= { {<declaration>}* {<statement>}* }

<statement> ::= <expression-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>


<expression-statement> ::= {<expression>}? ;

<selection-statement> ::= if ( <expression> ) "{" <statement> "}"
                        | if ( <expression> ) "{" <statement> "}" else "{" <statement> "}"

<iteration-statement> ::= while ( <expression> ) "{" <statement> "}"

<unary-operator> ::= AND
                   | MUL
                   | ADD
                   | SUB
                   | NOT
