* Project      : Great Sage
*                https://github.com/leostayner/
* Developed by : Leonardo Pereira Medeiros
 
 gramma Great Sage;

{
    tokens=[
         identifier='regexp:[a-zA-Z][a-zA-Z0-9_]*'

         integer-constant='regexp:\d+'
         character-constant='regexp:[a-zA-Z]'
         floating-constant='regexp:[+-]?([0-9]*[.])?[0-9]+f'
    ]
}

<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= {<declaration-specifier>}* <declarator> {<declaration>}* <compound-statement>

<declaration-specifier> ::= <type-specifier>
                        
<type-specifier> ::= void
                   | char
                   | int
                   | float
                   | double
                                       
<declarator> ::= <direct-declarator>

<direct-declarator> ::= <identifier>
                      
<constant-expression> ::= <inclusive-or-expression>

<inclusive-or-expression> ::= <and-expression>
                            | <inclusive-or-expression> | <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> & <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> == <relational-expression>

<relational-expression> ::= <relational-expression> < <additive-expression>
                          | <relational-expression> > <additive-expression>


<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> * <cast-expression>
                              | <multiplicative-expression> / <cast-expression>




<cast-expression> ::= <unary-expression>
                    | ( <type-name> ) <cast-expression>

<unary-expression> ::= <postfix-expression>
                     | <unary-operator> <cast-expression>
                     
<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> ( {<assignment-expression>}* )
                       | <postfix-expression> . <identifier>
                       
                  
<primary-expression> ::= <identifier>
                       | <constant>
                       | <string>
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <character-constant>
             | <floating-constant>

<expression> ::= <assignment-expression>
               | <expression> , <assignment-expression>

<assignment-expression> ::= <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= =

<unary-operator> ::= &
                   | *
                   | +
                   | -
                   | !

<declaration> ::=  {<declaration-specifier>}+ {<init-declarator>}* ;

<init-declarator> ::= <declarator>
                    | <declarator> = <initializer>

<initializer> ::= <assignment-expression>
                | { <initializer-list> }
                | { <initializer-list> , }

<initializer-list> ::= <initializer>
                     | <initializer-list> , <initializer>


<compound-statement> ::= { {<declaration>}* {<statement>}* }

<statement> ::= <expression-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>

<expression-statement> ::= {<expression>}? ;

<selection-statement> ::= if ( <expression> ) <statement>
                        | if ( <expression> ) <statement> else <statement>

<iteration-statement> ::= while ( <expression> ) <statement>

